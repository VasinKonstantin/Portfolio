{
	"info": {
		"_postman_id": "b3583837-0822-4b9c-9cc3-058a5a50936f",
		"name": "Qa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31132181"
	},
	"item": [
		{
			"name": "User list no auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 403', function() {\r",
							"    pm.response.to.have.status(403);\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data array should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total, page, and limit fields are present with valid values\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.total).to.exist.and.to.be.a('number');\r",
							"  pm.expect(responseData.page).to.exist.and.to.be.a('number');\r",
							"  pm.expect(responseData.limit).to.exist.and.to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Picture URLs are in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.data).to.be.an('array');\r",
							"\r",
							"  responseData.data.forEach(function(user) {\r",
							"    pm.expect(user.picture).to.match(/^https?:\\/\\/.+\\.(png|jpg|jpeg|gif)$/);\r",
							"  });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure and data types of the response schema\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.data).to.be.an('array');\r",
							"  responseData.data.forEach(function(user){\r",
							"    pm.expect(user).to.be.an('object');\r",
							"    pm.expect(user.id).to.be.a('string');\r",
							"    pm.expect(user.name).to.be.a('string');\r",
							"    pm.expect(user.email).to.be.a('string');\r",
							"    pm.expect(user.age).to.be.a('number');\r",
							"    pm.expect(user.address).to.be.an('object');\r",
							"    pm.expect(user.address.street).to.be.a('string');\r",
							"    pm.expect(user.address.city).to.be.a('string');\r",
							"    pm.expect(user.address.state).to.be.a('string');\r",
							"    pm.expect(user.address.zip).to.be.a('string');\r",
							"    pm.expect(user.phone).to.be.a('string');\r",
							"  });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/user?page=1&limit=10",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set('user_id',jsonData.id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n\"firstName\":\"test2\",\r\n\r\n\"lastName\": \"test1\",\r\n\"email\":\"kostya.test4.qa@mail.ru\"\r\n\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/create",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"create"
					]
				},
				"description": "The `POST /user/create` endpoint is used to create a new user with the provided details. The request should include the user's first name, last name, and email in the request body.\n\n### Request Body\n\n- `firstName` (string, required): The first name of the user.\n    \n- `lastName` (string, required): The last name of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n\n### Response\n\nThe response will be a JSON object with the following properties:\n\n- `id` (string): The unique identifier of the created user.\n    \n- `firstName` (string): The first name of the created user.\n    \n- `lastName` (string): The last name of the created user.\n    \n- `email` (string): The email address of the created user.\n    \n- `registerDate` (string): The date when the user registered.\n    \n- `updatedDate` (string): The date when the user details were last updated.\n    \n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": { \"type\": \"string\" },\n    \"firstName\": { \"type\": \"string\" },\n    \"lastName\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\" },\n    \"registerDate\": { \"type\": \"string\" },\n    \"updatedDate\": { \"type\": \"string\" }\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Update user",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"test83\",\r\n    \"lastName\": \"test10\",\r\n    \"email\": \"kostya.test1.qa@mail.ru@mail.ru\",\r\n    \"phone\": \"797877893360\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check user after update",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set('post_id',jsonData.id)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"text\":\"Hello World1\",\r\n\"image\":\"https://randomuser.me/api/portraits/med/women/89.jpg\",\r\n\"likes\": 1000,\r\n\"tags\":\"QA\",\r\n\"owner\":\"{{user_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/post/create",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"post",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check post",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/{{user_id}}/post",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"{{user_id}}",
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check post list",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/post",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set('comment_id',jsonData.id)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"message\":\"Kostya.test1\", \r\n\"owner\":\"{{user_id}}\",\r\n\"post\":\"{{post_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/comment/create",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"comment",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check comment",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/{{user_id}}/comment",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"{{user_id}}",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comment",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/comment/{{comment_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"comment",
						"{{comment_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check comment afterdelete",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/{{user_id}}/comment",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"{{user_id}}",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check after delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code is 404',function(){\r",
							"    pm.response.to.have.status(404);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"{{user_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "66486cf013d166b3c6323742",
				"type": "string"
			},
			{
				"key": "key",
				"value": "app-id",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "",
			"type": "string"
		}
	]
}
